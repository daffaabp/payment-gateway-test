generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id             String             @id @default(cuid())
    email          String             @unique
    hashedPassword String
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @updatedAt
    tokens         UserToken[]
    chatTokens     ChatToken? // Relasi one-to-one dengan ChatToken
    UserProfile    UserProfile[]
    subscriptions  UserSubscription[]

    @@map("users")
}

model UserToken {
    id        String    @id @default(cuid())
    userId    String
    type      TokenType
    token     String
    expiresAt DateTime
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_tokens")
}

enum TokenType {
    PASSWORD_RESET
    EMAIL_VERIFICATION
}

model UserProfile {
    id          String   @id @default(cuid())
    userId      String
    firstName   String
    lastName    String
    phone       String
    institution String
    address     String
    city        String
    province    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_profiles")
}

// Model untuk manajemen token chat
model ChatToken {
    id        String   @id @default(cuid())
    userId    String   @unique
    remaining Int      @default(15) // Token tersisa, default 15
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("chat_tokens")
}

// Model untuk manajemen subscription
model UserSubscription {
    id          String   @id @default(cuid())
    userId      String
    licenseCode String?
    isActive    Boolean  @default(true)
    expiredAt   DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_subscriptions")
}
